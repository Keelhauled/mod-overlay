#!/bin/python

import os
from argparse import ArgumentParser
from subprocess import Popen, PIPE

def parse_args():
    parser = ArgumentParser(description="Mount overlayfs for mods")
    parser.add_argument("mods_dir", help="The directory that will be searched for mod folders.")
    parser.add_argument("mount_dir", help="The directory the overlay will be mounted to.")
    parser.add_argument("--subdir", dest="mod_subdir", help="The sub directory inside each mod folder that will be mounted.")
    parser.add_argument("--upperdir", dest="upper_dir", help="A directory merged on top of all the mod dirs where all the changes done to the file system will be written.")
    parser.add_argument("--workdir", dest="work_dir", help="A directory used internally by fuse-overlays, must be on the same file system as the upper dir.")
    parser.add_argument("--reverse", dest="reverse", help="Reverse the mod priority.", action="store_true")
    parser.add_argument("--setup", dest="service_name", help="Instead of mounting the overlay, create a systemd service to do it automatically. Service will be named like 'mod-overlay-SERVICE_NAME.service'")
    parser.add_argument("--verbose", "-v", dest="verbose", help="Print the mod order when mounting", action="store_true")
    return parser.parse_args()

def create_service(args):
    filename = f"mod-overlay-{args.service_name}.service"
    filepath = os.path.join(os.path.expanduser('~'), ".config/systemd/user/", filename) # use XDG_CONFIG_HOME

    exec = f"{__file__} {args.mods_dir} {args.mount_dir}"
    if args.mod_subdir != None:
        exec += f" --subdir {args.mod_subdir}"
    if args.upper_dir != None:
        exec += f" --upperdir {args.upper_dir}"
    if args.work_dir != None:
        exec += f" --workdir {args.work_dir}"
    if args.reverse:
        exec += " --reverse"

    with open(filepath, 'x') as f:
        f.write(f"""[Unit]
Description=mod-overlay {args.service_name}
[Service]
Type=forking
WorkingDirectory={os.getcwd()}
ExecStart={exec}
ExecStop=fusermount -u {args.mount_dir}
[Install]
WantedBy=default.target
""")

    if os.path.exists(filepath):
        print(f"Service created in {filepath}")
        print("Double check the file for any errors for your own sake")
        print("Run 'systemctl --user daemon-reload' to get systemd to notice the new file")
        print(f"Run 'systemctl --user start {filename}' to start the overlay")
        print(f"Run 'systemctl --user enable {filename}' if you want to start the service on boot")
    else:
        print("Something went wrong ¯\_(ツ)_/¯")

def mount(args):
    mods = []
    if args.mod_subdir == None:
        for root,dirs,files in os.walk(args.mods_dir):
            mods = dirs
            break
        mods.sort(reverse=args.reverse, key=lambda x: x.casefold())
    else:
        for root,dirs,files in os.walk(args.mods_dir):
            if args.mod_subdir in dirs:
                mods.append(root)
                dirs.clear()
        mods.sort(reverse=args.reverse, key=lambda x: x.casefold())
        for i in range(len(mods)):
            mods[i] = os.path.join(mods[i], args.mod_subdir)

    print(f"Mounting {len(mods)} mods")
    if args.verbose:
        print("Mods starting from highest priority:")
        for mod in mods:
            print(mod)

    if not os.path.exists(args.mount_dir):
        os.mkdir(args.mount_dir)

    mods_string = ':'.join(mods)
    command = ["fuse-overlayfs", "-o", f"lowerdir={mods_string}"]
    if args.upper_dir != None:
        command.extend(["-o", f"upperdir={args.upper_dir}"])
    if args.work_dir != None:
        command.extend(["-o", f"workdir={args.work_dir}"])
    command.append(args.mount_dir)

    process = Popen(command, stdout=PIPE, stderr=PIPE)
    stdout, stderr = process.communicate()
    if len(stdout) > 0: print(stdout.decode().strip())
    if len(stderr) > 0: print(stderr.decode().strip())

if __name__ == "__main__":
    args = parse_args()
    if args.service_name != None:
        create_service(args)
    else:
        mount(args)
