#!/bin/python

import os
from argparse import ArgumentParser
from subprocess import Popen, PIPE

parser = ArgumentParser(description="Mount overlayfs for mods")
parser.add_argument("mods_dir", help="The directory that will be searched for mod folders.")
parser.add_argument("mount_dir", help="The directory the overlay will be mounted to.")
parser.add_argument("--mod-subdir", dest="mod_subdir", help="The sub directory inside each mod folder that will be mounted.")
parser.add_argument("--upperdir", dest="upper_dir", help="A directory required for a writable overlay system.")
parser.add_argument("--workdir", dest="work_dir", help="A directory required for a writable overlay system.")
parser.add_argument("--reverse", dest="reverse", help="Reverse mod priority", action="store_true")
parser.add_argument("--setup", dest="setup_name", help="A unique name used to create a systemd service for this mod setup. (In the format 'mod-overlay-NAME.service')")
args = parser.parse_args()

if args.setup_name != None:
    filename = f"mod-overlay-{args.setup_name}.service"
    filepath = os.path.join(os.path.expanduser('~'), ".config/systemd/user/", filename)

    exec = f"{__file__} {args.mods_dir} {args.mount_dir}"
    if args.mod_subdir != None:
        exec += f" --mod-subdir {args.mod_subdir}"
    if args.upper_dir != None:
        exec += f" --upperdir {args.upper_dir}"
    if args.work_dir != None:
        exec += f" --workdir {args.work_dir}"
    if args.reverse:
        exec += " --reverse"

    with open(filepath, 'x') as f:
        f.write(f"""[Unit]
Description=mod-overlay {args.setup_name}
[Service]
Type=forking
WorkingDirectory={os.getcwd()}
ExecStart={exec}
ExecStop=fusermount -u {args.mount_dir}
[Install]
WantedBy=default.target
""")
    if os.path.exists(filepath):
        print(f"Service created in {filepath}")
        print("Double check the file for any errors for your own sake")
        print("Run 'systemctl --user daemon-reload' to get systemd to notice the new file")
        print(f"Run 'systemctl --user start {filename}' to start the overlay")
        print(f"Run 'systemctl --user enable {filename}' if you want to start the service on boot")
    else:
        print("Something went wrong ¯\_(ツ)_/¯")
    exit()

mods = []
if args.mod_subdir == None:
    for root,dirs,files in os.walk(args.mods_dir):
        mods = dirs
        break
else:
    for root,dirs,files in os.walk(args.mods_dir):
        if args.mod_subdir in dirs:
            mods.append(os.path.join(root, args.mod_subdir))
            dirs = []
            
mods.sort(reverse=args.reverse, key=lambda x: x.casefold())
mods_string = ':'.join(mods)
print(f"Mounting {len(mods)} mods")

if not os.path.exists(args.mount_dir):
    os.mkdir(args.mount_dir)

command = ["fuse-overlayfs", "-o", f"lowerdir={mods_string}"]
if args.upper_dir != None:
    command.append("-o")
    command.append(f"upperdir={args.upper_dir}")
if args.work_dir != None:
    command.append("-o")
    command.append(f"workdir={args.work_dir}")
command.append(args.mount_dir)

process = Popen(command, stdout=PIPE, stderr=PIPE)
stdout, stderr = process.communicate()
if len(stdout) > 0: print(stdout.decode().strip())
if len(stderr) > 0: print(stderr.decode().strip())
