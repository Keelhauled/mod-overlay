#!/bin/python

import os
import argparse
from subprocess import Popen, PIPE
import colorama

def mount():
    print("Mounting mods")
    files = map(lambda x: os.path.join(args.mods_dir, x), os.listdir(args.mods_dir))
    mods = list(filter(os.path.isdir, files))
    mods.sort(reverse=args.reverse, key=lambda x: x.casefold())
    for mod in mods: print(os.path.basename(mod))
    mods_string = ':'.join(f"{str(x)}/{args.mod_subdir}" for x in mods)
    if not os.path.exists(args.mount_dir): os.mkdir(args.mount_dir)
    command = ["fuse-overlayfs", "-o", f"lowerdir={mods_string}"]
    if not args.upper_dir == "":
        command.append("-o")
        command.append(f"upperdir={args.upper_dir}")
    if not args.work_dir == "":
        command.append("-o")
        command.append(f"workdir={args.work_dir}")
    command.append(args.mount_dir)
    process = Popen(command, stdout=PIPE, stderr=PIPE)
    process_wait(process)

def unmount():
    print("Unmounting")
    process = Popen(["fusermount", "-u", args.mount_dir], stdout=PIPE, stderr=PIPE)
    process_wait(process)

def process_wait(process : Popen[bytes]):
    stdout, stderr = process.communicate()
    if len(stdout) > 0: print(stdout.decode().strip())
    if len(stderr) > 0: print(stderr.decode().strip())

def daemonize():
    try:
        mount()
        print()
        cmd_input()
    except KeyboardInterrupt:
        print()
        unmount()

def cmd_input():
    cmd = input("Enter command: ")
    if cmd == "remount" or cmd == "r":
        unmount()
        daemonize()
    elif cmd == "unmount" or cmd == "u" or cmd == "q":
        unmount()
    elif cmd == "help" or cmd == "h":
        print_commands()
        print()
        cmd_input()
    else:
        cmd_input()

def print_commands():
    r = colorama.Style.RESET_ALL
    u = '\033[4m'
    print(f"{u}r{r}emount, {u}u{r}nmount, {u}h{r}elp")

functions = {"mount" : mount, "unmount" : unmount, "daemon" : daemonize}
parser = argparse.ArgumentParser(description="Mount/unmount overlayfs for mods")
parser.add_argument("command", choices=functions)
parser.add_argument("mods_dir", help="The directory that will be searched for mod folders.")
parser.add_argument("mount_dir", help="The directory the overlay will be mounted to.")
parser.add_argument("--mod-subdir", "-s", dest="mod_subdir", default="", help="The sub directory inside each mod folder that will be mounted.")
parser.add_argument("--upperdir", "-u", dest="upper_dir", default="", help="")
parser.add_argument("--workdir", "-w", dest="work_dir", default="", help="")
parser.add_argument("--reverse", "-r", action="store_true", dest="reverse", default=False, help="Reverse mod priority")
args = parser.parse_args()
functions[args.command]()
